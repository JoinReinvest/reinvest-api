type AccountActivity {
  activityName: String!

  """
  Only some activities can have extra data. For most of them there is no extra data
  """
  data: AccountActivityData
  date: ISODate!
}

type AccountActivityData {
  origin: String
  tradeId: String
}

type AccountConfiguration {
  automaticDividendReinvestmentAgreement: AutomaticDividendReinvestmentAgreement
}

type AccountOverview {
  avatar: GetAvatarLink
  id: ID
  isBanned: Boolean
  label: String
  type: AccountType
}

type AccountStats {
  EVS: String!
  accountValue: String!
  advisorFees: String!
  appreciation: String!
  costOfSharesOwned: String!
  currentNAVPerShare: String!
  dividends: String!
  netReturns: String!
  quantityOfShares: String!
}

enum AccountType {
  BENEFICIARY
  CORPORATE
  INDIVIDUAL
  TRUST
}

"""Only one of these statements can be valid"""
input AccreditedInvestorInput {
  statement: AccreditedInvestorStatement!
}

enum AccreditedInvestorStatement {
  I_AM_AN_ACCREDITED_INVESTOR
  I_AM_NOT_EXCEEDING_10_PERCENT_OF_MY_NET_WORTH_OR_ANNUAL_INCOME
}

enum ActionName {
  BAN_ACCOUNT
  BAN_PROFILE
  REQUIRE_ADMIN_SUPPORT
  REQUIRE_MANUAL_REVIEW
  UPDATE_MEMBER
  UPDATE_MEMBER_AGAIN
}

type Address {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  state: String
  zip: String
}

input AddressInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  state: String!
  zip: String!
}

type AgreementParagraph {
  isCheckedOption: Boolean
  lines: [String!]!
}

type AgreementSection {
  header: String
  paragraphs: [AgreementParagraph!]!
}

enum AgreementStatus {
  SIGNED
  WAITING_FOR_SIGNATURE
}

type AnnualRevenue {
  range: String
}

input AnnualRevenueInput {
  range: String!
}

type ArchivedBeneficiaryStatus {
  archived: Boolean!
  parentAccountUpdatedValue: USD
}

type AutomaticDividendReinvestmentAgreement {
  date: ISODateTime
  signed: Boolean!
}

"""Avatar link id input"""
input AvatarFileLinkInput {
  """This is @PutFileLink.id"""
  id: ID!
}

type BankAccount {
  accountNumber: String
  accountType: String
  bankAccountStatus: BankAccountStatus
  bankName: String
}

type BankAccountLink {
  link: String
}

enum BankAccountStatus {
  ACTIVE
  DRAFT
  INACTIVE
}

type BeneficiaryAccount {
  avatar: GetAvatarLink
  details: BeneficiaryDetails
  id: ID
  label: String
}

type BeneficiaryDetails {
  name: BeneficiaryName
}

type BeneficiaryName {
  firstName: String!
  lastName: String!
}

input BeneficiaryNameInput {
  firstName: String!
  lastName: String!
}

type CompanyDraftAccountDetails {
  address: Address
  annualRevenue: AnnualRevenue
  companyDocuments: [DocumentFileLinkId]
  companyName: CompanyName
  companyType: CompanyType
  ein: EIN
  industry: Industry
  numberOfEmployees: NumberOfEmployees
  stakeholders: [Stakeholder]
}

type CompanyName {
  name: String
}

input CompanyNameInput {
  name: String!
}

type CompanyType {
  type: CompanyTypeEnum
}

enum CompanyTypeEnum {
  CORPORATION
  IRREVOCABLE
  LLC
  PARTNERSHIP
  REVOCABLE
}

type CorporateAccount {
  avatar: GetAvatarLink
  details: CorporateAccountDetails
  id: ID
  label: String
}

type CorporateAccountDetails {
  address: Address
  annualRevenue: AnnualRevenue
  companyDocuments: [DocumentFileLinkId]
  companyName: CompanyName
  companyType: CompanyType
  ein: String
  industry: Industry
  numberOfEmployees: NumberOfEmployees
  stakeholders: [Stakeholder]
}

type CorporateCompanyType {
  type: CorporateCompanyTypeEnum
}

enum CorporateCompanyTypeEnum {
  CORPORATION
  LLC
  PARTNERSHIP
}

input CorporateCompanyTypeInput {
  type: CorporateCompanyTypeEnum!
}

type CorporateDraftAccount {
  avatar: GetAvatarLink
  details: CompanyDraftAccountDetails
  id: ID
  isCompleted: Boolean
  state: DraftAccountState
}

input CorporateDraftAccountInput {
  address: AddressInput
  annualRevenue: AnnualRevenueInput

  """
  IMPORTANT: it removes previously uploaded avatar from s3 for this draft account
  """
  avatar: AvatarFileLinkInput
  companyDocuments: [DocumentFileLinkInput]
  companyName: CompanyNameInput
  companyType: CorporateCompanyTypeInput
  ein: EINInput
  industry: IndustryInput
  numberOfEmployees: NumberOfEmployeesInput

  """IMPORTANT: it removes these documents from s3"""
  removeDocuments: [DocumentFileLinkInput]

  """
  IMPORTANT: it removes previously uploaded id scan documents from s3 for this stakeholder
  """
  removeStakeholders: [StakeholderIdInput]
  stakeholders: [StakeholderInput]
}

input CreateBeneficiaryInput {
  avatar: AvatarFileLinkInput
  name: BeneficiaryNameInput!
}

type DateOfBirth {
  dateOfBirth: ISODate!
}

input DateOfBirthInput {
  dateOfBirth: ISODate!
}

type Dividend {
  amount: USD!
  date: ISODateTime!
  id: ID!
  status: DividendState!
}

type DividendOverview {
  amount: USD!
  date: ISODateTime!
  id: ID!
  status: DividendState!
}

enum DividendState {
  PAID_OUT
  PAYING_OUT
  PENDING
  REINVESTED
}

type DividendsList {
  dividendsList: [DividendOverview]
}

"""Link id"""
type DocumentFileLinkId {
  fileName: String
  id: ID
}

"""Avatar link id input"""
input DocumentFileLinkInput {
  """File name should be in format: .pdf, .jpeg, .jpg, .png"""
  fileName: FileName!

  """This 'id' comes usually from @PutFileLink.id"""
  id: ID!
}

type Domicile {
  birthCountry: String
  citizenshipCountry: String
  type: DomicileType
  visaType: String
}

"""
An investor statement of domicile type.
Choose the right one and add details depending on the chosen type
"""
input DomicileInput {
  forGreenCard: GreenCardInput
  forVisa: VisaInput
  type: DomicileType!
}

enum DomicileType {
  CITIZEN
  GREEN_CARD
  VISA
}

type DraftAccount {
  id: ID
  type: DraftAccountType
}

enum DraftAccountState {
  ACTIVE
  CANCELED
  OPENED
}

enum DraftAccountType {
  CORPORATE
  INDIVIDUAL
  TRUST
}

type EIN {
  ein: String
}

input EINInput {
  ein: String!
}

type EVSChart {
  changeFactor: String!
  dataPoints: [EVSChartPoint]
  endAt: ISODate!
  resolution: EVSChartResolution
  startAt: ISODate!
}

type EVSChartPoint {
  date: ISODate!
  usd: Float!
}

enum EVSChartResolution {
  DAY
  FIVE_YEARS
  MAX
  MONTH
  WEEK
  YEAR
}

"""A valid email address"""
scalar EmailAddress

input EmailInput {
  email: EmailAddress!
}

type Employer {
  industry: String
  nameOfEmployer: String
  title: String
}

input EmployerInput {
  industry: String!
  nameOfEmployer: String!
  title: String!
}

enum EmploymentStatus {
  EMPLOYED
  RETIRED
  STUDENT
  UNEMPLOYED
}

input EmploymentStatusInput {
  status: EmploymentStatus!
}

type EmploymentStatusType {
  status: EmploymentStatus
}

enum Experience {
  EXPERT
  NO_EXPERIENCE
  SOME_EXPERIENCE
  VERY_EXPERIENCED
}

input ExperienceInput {
  experience: Experience
}

input FINRAStatementInput {
  name: String!
}

"""Image or pdf filename with extension. Example: image.jpg, document.pdf"""
scalar FileName

""" Plaid response"""
input FulfillBankAccountInput {
  """ plaidAccountDetails.account_name"""
  accountName: String

  """ plaidAccountDetails.account_number"""
  accountNumber: String!

  """ plaidAccountDetails.account_type"""
  accountType: String!

  """ plaidAccountDetails.institutionId"""
  institutionId: String

  """ plaidAccountDetails.institution_name"""
  institutionName: String

  """ plaidAccountDetails.refNum"""
  refNumber: String!

  """ plaidAccountDetails.routing_number"""
  routingNumber: String!
}

type FundsWithdrawalAgreement {
  content: [AgreementSection!]!
  createdAt: ISODateTime!
  id: ID!
  signedAt: ISODateTime
  status: AgreementStatus!
}

type FundsWithdrawalRequest {
  accountValue: USD!
  agreementId: ID
  createdDate: ISODateTime!
  decisionDate: ISODateTime
  decisionMessage: String
  eligibleForWithdrawal: USD!
  investorWithdrawalReason: String
  penaltiesFee: USD!
  status: FundsWithdrawalRequestStatus!
}

enum FundsWithdrawalRequestStatus {
  APPROVED
  AWAITING_DECISION
  AWAITING_SIGNING_AGREEMENT
  DRAFT
  REJECTED
}

type FundsWithdrawalSimulation {
  accountValue: USD!
  canWithdraw: Boolean!
  eligibleForWithdrawal: USD!
  penaltiesFee: USD!
}

"""Link id + url to read the avatar"""
type GetAvatarLink {
  id: ID
  initials: String
  url: String
}

"""Link id + url to read the document"""
type GetDocumentLink {
  id: ID
  url: String
}

input GreenCardInput {
  birthCountry: String!
  citizenshipCountry: String!
}

"""Date in format YYYY-MM-DD"""
scalar ISODate

"""DateTime in format YYYY-MM-DDThh:mm:ss in UTC+0"""
scalar ISODateTime

type ImpactMetrics {
  jobsCreated: String
  totalProjectSize: String
  units: String
}

type IndividualAccount {
  avatar: GetAvatarLink
  details: IndividualAccountDetails
  id: ID
  label: String
}

type IndividualAccountDetails {
  employer: Employer
  employmentStatus: EmploymentStatusType
  netIncome: NetRange
  netWorth: NetRange
}

input IndividualAccountInput {
  """
  IMPORTANT: it removes previously uploaded avatar from s3 for this draft account
  """
  avatar: AvatarFileLinkInput
  employer: EmployerInput
  employmentStatus: EmploymentStatusInput
  netIncome: NetRangeInput
  netWorth: NetRangeInput
}

type IndividualDraftAccount {
  avatar: GetAvatarLink
  details: IndividualDraftAccountDetails
  id: ID
  isCompleted: Boolean
  state: DraftAccountState
}

type IndividualDraftAccountDetails {
  employer: Employer
  employmentStatus: EmploymentStatusType
  netIncome: NetRange
  netWorth: NetRange
}

type Industry {
  value: String
}

input IndustryInput {
  value: String!
}

type InvestmentOverview {
  amount: USD!
  createdAt: ISODateTime!
  id: ID!
  status: InvestmentStatus!
  tradeId: String!
}

enum InvestmentStatus {
  CANCELED
  CANCELING
  FAILED
  FINISHED
  FUNDED
  IN_PROGRESS
  REVERTED
  SETTLING
  TRANSFERRED
  WAITING_FOR_FEES_APPROVAL
  WAITING_FOR_INVESTMENT_START
  WAITING_FOR_SUBSCRIPTION_AGREEMENT
}

type InvestmentSummary {
  amount: USD!
  bankAccount: BankAccount
  createdAt: ISODateTime!
  id: ID!
  investmentFees: USD
  status: InvestmentStatus!
  subscriptionAgreementId: ID
  tradeId: String!
}

type KeyMetrics {
  projectReturn: String
  rating: String
  structure: String
}

input LegalNameInput {
  name: String!
}

type Location {
  lat: String
  lng: String
}

"""Money value as integer. 1=$0.01, 1000 = $10.00, 10000000 = $100,000.00"""
scalar Money

type Mutation {
  """
  It aborts the funds withdrawal request if it is not yet approved or rejected
  """
  abortFundsWithdrawalRequest(accountId: ID!): Boolean!

  """
  It aborts the investment that haven't been started yet (by startInvestment mutation).
  """
  abortInvestment(investmentId: ID!): Boolean!

  """
  Approves the fees for the specific investment.
  In case if extra fee is required for recurring investment and the investment was started automatically by the system, then
  use this method to approve the fees (it will ask for that on verification step triggered from the notification).
  """
  approveFees(investmentId: ID!): Boolean!

  """
  [MOCK] Archive beneficiary account - it moves investments from a beneficiary to the individual account
  """
  archiveBeneficiaryAccount(accountId: ID!): ArchivedBeneficiaryStatus!

  """
  It cancels the investment that is in Funding or Funded state, but the Grace period has not been passed away yet
  """
  cancelInvestment(investmentId: ID!): Boolean!

  """Complete corporate draft account"""
  completeCorporateDraftAccount(accountId: ID, input: CorporateDraftAccountInput): CorporateDraftAccount

  """Complete individual draft account"""
  completeIndividualDraftAccount(accountId: ID, input: IndividualAccountInput): IndividualDraftAccount

  """
  Profile onboarding mutation.
  Every field in the input can be requested separately.
  In case of any failure all changes in the request are not stored in the database.
  To finish onboarding send field 'verifyAndFinish'
  """
  completeProfileDetails(input: ProfileDetailsInput): Profile

  """Complete trust draft account"""
  completeTrustDraftAccount(accountId: ID, input: TrustDraftAccountInput): TrustDraftAccount

  """
  Create file links for avatar.
  In the response, it returns the "id" and "url".
  Use "url" for PUT request to upload the avatar directly to AWS S3. The url has expiration date!
  Use "id" wherever system needs the reference to the avatar file.
  """
  createAvatarFileLink: PutFileLink

  """
  It creates new link to the investor bank account. It works only if the account does not have any bank account linked yet.
  Every time when the system create new link it cost $1.80 (on prod). Do not call it if it is not necessary.
  The bank account will not be activated until the investor fulfills the bank account.
  """
  createBankAccount(accountId: ID!): BankAccountLink

  """
  Create file links for documents.
  In the response, it returns the "id" and "url".
  Use "url" for PUT request to upload the file directly to AWS S3. The url has expiration date!
  Use "id" wherever system needs the reference to uploaded file.
  """
  createDocumentsFileLinks(numberOfLinks: numberOfLinks_Int_NotNull_min_1_max_10!): [PutFileLink]

  """
  Create draft of an account to fulfill with data before open it.
  You can have only one draft account created of a specific type in the same time.
  """
  createDraftAccount(type: DraftAccountType): DraftAccount

  """It creates the funds withdrawal agreement."""
  createFundsWithdrawalAgreement(accountId: ID!): FundsWithdrawalAgreement!

  """
  Create funds withdrawal request. It is just a DRAFT. You need to sign the agreement and then request the withdrawal.
  """
  createFundsWithdrawalRequest(accountId: ID!, investorWithdrawalReason: String): FundsWithdrawalRequest!

  """
  It creates new investment and returns its ID.
  It requires bank account to be linked to the account.
  In other case it throws an error.
  """
  createInvestment(accountId: ID!, amount: USDInput): ID!

  """
  It creates new investment and returns its ID.
  It requires bank account to be linked to the account.
  In other case it throws an error.
  """
  createRecurringInvestment(accountId: ID!, amount: USDInput!, schedule: RecurringInvestmentScheduleInput!): RecurringInvestment!

  """
  It creates new subscription agreement for the specific recurring investment
  It returns the content of the agreement that must be rendered on the client side.
  Client must sign the agreement and call signRecurringInvestmentSubscriptionAgreement mutation.
  """
  createRecurringSubscriptionAgreement(accountId: ID!): SubscriptionAgreement!

  """
  It creates new subscription agreement for the specific investment
  It returns the content of the agreement that must be rendered on the client side.
  Client must sign the agreement and call signSubscriptionAgreement mutation.
  """
  createSubscriptionAgreement(investmentId: ID!): SubscriptionAgreement!

  """It DEACTIVATE the recurring investment."""
  deactivateRecurringInvestment(accountId: ID!): Boolean!

  """
  Provide the response from Plaid here.
  The bank account will not be activated until the investor fulfills the bank account.
  """
  fulfillBankAccount(accountId: ID!, input: FulfillBankAccountInput!): Boolean

  """
  It STARTS the recurring investment, CANCEL previous recurring investment if exists and schedule the first investment.
  """
  initiateRecurringInvestment(accountId: ID!): Boolean!

  """Mark notification as read"""
  markNotificationAsRead(notificationId: ID!): Boolean!

  """
  Open REINVEST Account based on draft.
  Currently supported: Individual Account
  """
  openAccount(draftAccountId: ID!): Boolean

  """Open beneficiary account"""
  openBeneficiaryAccount(individualAccountId: ID!, input: CreateBeneficiaryInput!): BeneficiaryAccount

  """Register device for Firebase push notifications"""
  registerPushNotificationDevice(deviceId: String!): Boolean!

  """
  Reinvest dividend - you can reinvest many dividends in the same time. If one of them is not reinvestable, then all of them will be rejected.
  """
  reinvestDividend(accountId: ID!, dividendIds: [ID!]): Boolean!

  """
  Remove draft account
  IMPORTANT: it removes all uploaded avatar and documents from s3 for this draft account
  """
  removeDraftAccount(draftAccountId: ID): Boolean
  renderPageToPdf(link: String, name: String): ID

  """
  It requests the funds withdrawal. The investor must sign the agreement first.
  """
  requestFundsWithdrawal(accountId: ID!): FundsWithdrawalRequest!

  """Set automatic dividend reinvestment agreement"""
  setAutomaticDividendReinvestmentAgreement(accountId: ID!, automaticDividendReinvestmentAgreement: Boolean!): Boolean!

  """
  Add phone number. The system will send the verification code to the provided phone number via sms.
  Token will be valid for 10 minutes and can be used only once.
  After 3 failed attempts the token will be expired.
  Optional field isSmsAllowed set to false will prevent sending sms with verification code (for test purposes).
  On default isSmsAllowed is true.
  """
  setPhoneNumber(countryCode: String, isSmsAllowed: Boolean = true, phoneNumber: String): Boolean

  """It signs the agreement of funds withdrawal."""
  signFundsWithdrawalAgreement(accountId: ID!): FundsWithdrawalAgreement!

  """It signs the recurring investment subscription agreement."""
  signRecurringInvestmentSubscriptionAgreement(accountId: ID!): Boolean!

  """It signs the subscription agreement."""
  signSubscriptionAgreement(investmentId: ID!): Boolean!

  """
  It starts the investment.
  It requires subscription agreement to be signed and fees to be approved.
  The fees can be approved also by this method (if approveFees is true).
  """
  startInvestment(approveFees: Boolean, investmentId: ID!): Boolean!

  """It UNSUSPEND the recurring investment."""
  unsuspendRecurringInvestment(accountId: ID!): Boolean!

  """
  It updates the link to the investor bank account. It works only if the account has bank account linked already.
  Every time when the system create new link it cost $1.80 (on prod). Do not call it if it is not necessary.
  The bank account will not be activated until the investor fulfills the bank account.
  """
  updateBankAccount(accountId: ID!): BankAccountLink

  """Update beneficiary account"""
  updateBeneficiaryAccount(accountId: ID!, input: UpdateBeneficiaryAccountInput): BeneficiaryAccount

  """
  It updates company for verification. Provide only fields that were changed by the investor, but all required to meet the schema definition.
  """
  updateCompanyForVerification(accountId: ID!, input: UpdateCompanyForVerificationInput!): Boolean

  """Update corporate account"""
  updateCorporateAccount(accountId: ID!, input: UpdateCompanyAccountInput): CorporateAccount

  """
  It reads new verified email from cognito and update it in the REINVEST database
  """
  updateEmailAddress: Boolean

  """Update individual account"""
  updateIndividualAccount(accountId: ID!, input: IndividualAccountInput): IndividualAccount

  """
  Update profile fields
  Important Note: Some fields can trigger KYC/AML reverification
  """
  updateProfile(input: UpdateProfileInput): Profile

  """
  It updates profile for verification. Provide only fields that were changed by the investor, but all required to meet the schema definition.
  For example if investor changed only 'firstName' then provide only field 'name'.
  The name field expects PersonName type, so it must contain all required data (so 'firstName' and 'lastName' must be provided, even that only firstName changed).
  """
  updateProfileForVerification(input: UpdateProfileForVerificationInput!): Boolean

  """
  It updates stakeholder for verification. Provide only fields that were changed by the investor, but all required to meet the schema definition.
  """
  updateStakeholderForVerification(accountId: ID!, input: UpdateStakeholderForVerificationInput!, stakeholderId: ID!): Boolean

  """Update trust account"""
  updateTrustAccount(accountId: ID!, input: UpdateCompanyAccountInput): TrustAccount

  """
  It returns 'VerificationDecisions':
  * 'isAccountVerified: Boolean': it tells if all account's parties are verified or not
  * 'canUserContinueTheInvestment: Boolean': it tells can user continue the investment or not. If not then user
  must do extra actions to continue the investment
  * 'requiredActions': list of actions that user must perform to continue the investement.
  * [IMPORTANT] Some actions ban profile or accounts
  
  Action structure:
  - action: type of action. Based on that application must do some specific action
  - onObject: specifies the object that is a subject of an actions. It contains 2 fields:
  * type: type of object. It can be one of: 'PROFILE', 'STAKEHOLDER', 'COMPANY'
  * optional accountId (apply to 'STAKEHOLDER' and 'COMPANY')
  * optional stakeholderId (apply to 'STAKEHOLDER')
  - reasons: list of errors, suggestions what went wrong during verification. Potentially it can be used
  to display to user what went wrong
  
  List of current actions:
  * 'UPDATE_MEMBER' or 'UPDATE_MEMBER_AGAIN': it means that user must update details of object specified in 'onObject' field
  * 'BAN_ACCOUNT': it means that account must be banned and investment process and all other investments
  are blocked
  * 'BAN_PROFILE': it means that profile must be banned and all accounts are blocked
  * 'REQUIRE_MANUAL_REVIEW' or 'REQUIRE_ADMIN_SUPPORT': just information, no action on frontend is required ('canUserContinueTheInvestment' should be set to 'true')
  """
  verifyAccount(accountId: ID!): VerificationDecision

  """
  Verify phone number with received verification code on sms.
  This action will set the phone number in the user Cognito profile and allow to use 2FA with phone number
  """
  verifyPhoneNumber(authCode: String, countryCode: String, phoneNumber: String): Boolean

  """
  Withdraw dividend - you can withdraw many dividends in the same time. If one of them is not withdrawable, then all of them will be rejected.
  """
  withdrawDividend(accountId: ID!, dividendIds: [ID!]): Boolean!
}

type Nav {
  unitPrice: USD
}

type NetRange {
  range: String
}

input NetRangeInput {
  range: String!
}

type Notification {
  accountId: String
  body: String
  date: ISODateTime!
  header: String!
  id: ID!
  isDismissible: Boolean!
  isRead: Boolean!
  notificationType: NotificationType!
  onObject: NotificationObject
}

enum NotificationFilter {
  ALL
  UNREAD
}

type NotificationObject {
  id: ID!
  type: NotificationObjectType
}

enum NotificationObjectType {
  ACCOUNT
  DIVIDEND
  INVESTMENT
  RECURRING_INVESTMENT
}

enum NotificationType {
  DIVIDEND_PAYOUT_INITIATED
  DIVIDEND_RECEIVED
  DIVIDEND_REINVESTED
  DIVIDEND_REINVESTED_AUTOMATICALLY
  FEES_APPROVAL_REQUIRED
  FUNDS_WITHDRAWAL_ACCEPTED
  FUNDS_WITHDRAWAL_REJECTED
  GENERIC_NOTIFICATION
  INVESTMENT_FAILED
  INVESTMENT_FUNDS_RECEIVED
  RECURRING_INVESTMENT_FAILED
  REWARD_DIVIDEND_RECEIVED
  VERIFICATION_FAILED
}

type NotificationsStats {
  accountId: ID!
  getNotifications(filter: NotificationFilter, pagination: Pagination = {page: 0, perPage: 10}): [Notification]!
  totalCount: Int!
  unreadCount: Int!
}

type NumberOfEmployees {
  range: String
}

input NumberOfEmployeesInput {
  range: String!
}

type POI {
  description: String
  image: String
  name: String
}

"""If not provided, default pagination is page: 0, perPage: 10"""
input Pagination {
  page: Int! = 0
  perPage: Int! = 10
}

input PersonName {
  firstName: firstName_String_NotNull_minLength_1!
  lastName: lastName_String_NotNull_minLength_1!
  middleName: String
}

type PersonNameType {
  firstName: String
  lastName: String
  middleName: String
}

input PoliticianStatementInput {
  description: String!
}

type PortfolioAuthor {
  avatar: GetAvatarLink
  id: ID!
  name: String!
}

type PortfolioDetails {
  currentNav: Nav
  id: String
  name: String
  properties: [Property]
}

type PortfolioUpdate {
  author: PortfolioAuthor
  body: String
  createdAt: ISODateTime!
  image: GetDocumentLink
  title: String!
}

input PrivacyPolicyInput {
  statement: PrivacyPolicyStatement!
}

enum PrivacyPolicyStatement {
  I_HAVE_READ_AND_AGREE_TO_THE_REINVEST_PRIVACY_POLICY
}

"""
An investor profile information.
Returns data about investor details, accounts and notifications
"""
type Profile {
  accounts: [AccountOverview]
  details: ProfileDetails

  """The external, nice-looking profile ID"""
  externalId: String
  isCompleted: Boolean

  """The name/label of the user"""
  label: String
}

type ProfileDetails {
  address: Address
  dateOfBirth: String
  domicile: Domicile
  experience: Experience
  firstName: String
  idScan: [DocumentFileLinkId]
  lastName: String
  middleName: String
  ssn: String
  statements: [Statement]
}

input ProfileDetailsInput {
  """Permanent address of an investor"""
  address: AddressInput

  """Date of Birth in format YYYY-MM-DD"""
  dateOfBirth: DateOfBirthInput

  """Is the investor US. Citizen or US. Resident with Green Card or Visa"""
  domicile: DomicileInput

  """
  ID scan can be provided in more then one document, ie. 2 scans of both sides of the ID.
  Required "id" provided in the @FileLink type from the @createDocumentsFileLinks mutation
  IMPORTANT: it removes previously uploaded id scan documents from s3 if the previous document ids are not listed in the request
  """
  idScan: [DocumentFileLinkInput]
  investingExperience: ExperienceInput

  """An investor name"""
  name: PersonName

  """
  If an investor decided to remove one of the statements during onboarding
  """
  removeStatements: [StatementInput]

  """A valid SSN number"""
  ssn: SSNInput

  """
  FINRA, Politician, Trading company stakeholder, accredited investor, terms and conditions, privacy policy statements
  REQUIRED statements to complete the profile:
  - accredited investor
  - terms and conditions
  - privacy policy
  """
  statements: [StatementInput]

  """
  Send this field if you want to finish the onboarding. In case of success verification, onboarding will be considered as completed
  """
  verifyAndFinish: Boolean
}

type Property {
  POIs: [POI]
  address: PropertyAddress
  gallery: [String]
  image: String
  impactMetrics: ImpactMetrics
  keyMetrics: KeyMetrics
  location: Location
  name: String
}

type PropertyAddress {
  addressLine: String
  city: String
  zip: String
}

"""Link id + PUT url to store resource in the storage"""
type PutFileLink {
  id: ID
  url: String
}

type Query {
  """Get encrypted profileId"""
  encrypt: String

  """Get account activities"""
  getAccountActivity(accountId: ID!, pagination: Pagination = {page: 0, perPage: 10}): [AccountActivity]!

  """Return account configuration"""
  getAccountConfiguration(accountId: ID!): AccountConfiguration

  """Get account stats"""
  getAccountStats(accountId: ID!): AccountStats

  """Return all accounts overview"""
  getAccountsOverview: [AccountOverview]

  """It returns the current recurring investment summary."""
  getActiveRecurringInvestment(accountId: ID!): RecurringInvestment

  """Returns all portfolio updates"""
  getAllPortfolioUpdates: [PortfolioUpdate]

  """Returns beneficiary account information"""
  getBeneficiaryAccount(accountId: ID!): BeneficiaryAccount

  """Returns corporate account information"""
  getCorporateAccount(accountId: ID!): CorporateAccount

  """Get draft corporate account details"""
  getCorporateDraftAccount(accountId: ID): CorporateDraftAccount
  getDividend(dividendId: ID!): Dividend!

  """Returns document link by id"""
  getDocument(documentId: ID!): GetDocumentLink

  """It returns the created draft recurring investment summary."""
  getDraftRecurringInvestment(accountId: ID!): RecurringInvestment

  """Get EVS chart data for an account by resolution"""
  getEVSChart(accountId: ID!, resolution: EVSChartResolution!): EVSChart

  """Get funds withdrawal agreement"""
  getFundsWithdrawalAgreement(accountId: ID!): FundsWithdrawalAgreement

  """
  Get funds withdrawal request. It returns the current status of funds withdrawal request.
  """
  getFundsWithdrawalRequest(accountId: ID!): FundsWithdrawalRequest

  """Returns individual account information"""
  getIndividualAccount: IndividualAccount

  """Get details of individual draft account"""
  getIndividualDraftAccount(accountId: ID): IndividualDraftAccount

  """
  It returns the investment summary.
  Use this method to get info about the investment fees.
  """
  getInvestmentSummary(investmentId: ID!): InvestmentSummary!

  """
  Provides info about the number of unread/total notifications for the given account id
  It allows to retrieve notifications directly in the same query
  """
  getNotificationStats(accountId: ID!): NotificationsStats!

  """
  Get all notifications for the given account id
  It sort notifications by date descending. Not dismissible (pinned) notifications are always first.
  """
  getNotifications(accountId: ID!, filter: NotificationFilter = ALL, pagination: Pagination = {page: 0, perPage: 10}): [Notification]!

  """Returns all information about properties in the portfolio"""
  getPortfolioDetails: PortfolioDetails

  """Get user profile"""
  getProfile: Profile
  getRenderedPageLink(id: ID!): GetDocumentLink

  """Returns the simulation of the recurring investment schedule."""
  getScheduleSimulation(schedule: RecurringInvestmentScheduleInput!): [ISODate!]!

  """It returns the subscription agreement."""
  getSubscriptionAgreement(subscriptionAgreementId: ID!): SubscriptionAgreement!

  """Returns trust account information"""
  getTrustAccount(accountId: ID!): TrustAccount

  """Get draft trust account details"""
  getTrustDraftAccount(accountId: ID): TrustDraftAccount

  """ Just say hello """
  hello: Boolean
  ip: String

  """List all existing draft accounts if you need come back to onboarding"""
  listAccountDrafts: [DraftAccount]

  """Returns list of account types that user can open"""
  listAccountTypesUserCanOpen: [AccountType]

  """List all dividends"""
  listDividends(accountId: ID!): DividendsList

  """List of all investments history"""
  listInvestments(accountId: ID!, pagination: Pagination = {page: 0, perPage: 10}): [InvestmentOverview]!
  listRenderedPages(pagination: Pagination = {page: 0, perPage: 10}): [RenderedPage]

  """Returns information if user already assigned and verified phone number"""
  phoneCompleted: Boolean

  """Returns basic bank account information."""
  readBankAccount(accountId: ID!): BankAccount

  """
  Simulate funds withdrawal. It returns the simulation of withdrawal without any changes in the system.
  """
  simulateFundsWithdrawal(accountId: ID!): FundsWithdrawalSimulation!

  """Returns invitation link with a valid referral code (incentive token)"""
  userInvitationLink: UserInvitationLink
}

type RecurringInvestment {
  amount: USD!
  id: ID!
  nextInvestmentDate: ISODate!
  schedule: RecurringInvestmentSchedule!
  status: RecurringInvestmentStatus!
  subscriptionAgreementId: ID
}

enum RecurringInvestmentFrequency {
  BI_WEEKLY
  MONTHLY
  QUARTERLY
  WEEKLY
}

type RecurringInvestmentSchedule {
  frequency: RecurringInvestmentFrequency!
  startDate: ISODate!
}

input RecurringInvestmentScheduleInput {
  frequency: RecurringInvestmentFrequency!
  startDate: ISODate!
}

enum RecurringInvestmentStatus {
  ACTIVE
  DRAFT
  INACTIVE
  SUSPENDED
  WAITING_FOR_SIGNING_SUBSCRIPTION_AGREEMENT
}

type RenderedPage {
  dateCreated: String
  dateGenerated: String
  id: ID
  name: String

  """source url"""
  url: String
}

input SSNInput {
  """The valid SSN is 9 digits in format 'XXX-XX-XXXX'"""
  ssn: ssn_String_NotNull_pattern_093092094!
}

type SimplifiedDomicile {
  type: SimplifiedDomicileType
}

input SimplifiedDomicileInput {
  type: SimplifiedDomicileType!
}

enum SimplifiedDomicileType {
  CITIZEN
  RESIDENT
}

type Stakeholder {
  address: Address
  dateOfBirth: DateOfBirth
  domicile: SimplifiedDomicile
  id: ID
  idScan: [DocumentFileLinkId]
  label: String
  name: PersonNameType
  ssn: String
}

input StakeholderIdInput {
  id: ID!
}

input StakeholderInput {
  address: AddressInput!
  dateOfBirth: DateOfBirthInput!
  domicile: SimplifiedDomicileInput!

  """ IMPORTANT: id is required for update """
  id: ID

  """
  IMPORTANT: it removes previously uploaded id scan documents from s3 if the previous document ids are not listed in the request
  """
  idScan: [DocumentFileLinkInput]!
  name: PersonName!

  """ IMPORTANT: ssn is required for create. If you want to update it, you need to provide it in the request with id 
  """
  ssn: SSNInput
}

type Statement {
  details: [String]
  type: StatementType
}

"""
An investor statements for:
- being a FINRA member
- politician
- public trading company stakeholder
- accredited investor
- terms and conditions
- privacy policy
Choose type and add details depending on the chosen type
"""
input StatementInput {
  forAccreditedInvestor: AccreditedInvestorInput
  forFINRA: FINRAStatementInput
  forPolitician: PoliticianStatementInput
  forPrivacyPolicy: PrivacyPolicyInput
  forStakeholder: TradingCompanyStakeholderInput
  forTermsAndConditions: TermsAndConditionsInput
  type: StatementType!
}

enum StatementType {
  AccreditedInvestor
  FINRAMember
  Politician
  PrivacyPolicy
  TermsAndConditions
  TradingCompanyStakeholder
}

type SubscriptionAgreement {
  content: [AgreementSection!]!
  createdAt: ISODateTime!
  id: ID!
  signedAt: ISODateTime
  status: AgreementStatus!
  type: SubscriptionAgreementType!
}

enum SubscriptionAgreementType {
  DIRECT_DEPOSIT
  RECURRING_INVESTMENT
}

input TermsAndConditionsInput {
  statement: TermsAndConditionsStatement!
}

enum TermsAndConditionsStatement {
  I_HAVE_READ_AND_AGREE_TO_THE_REINVEST_TERMS_AND_CONDITIONS
}

input TradingCompanyStakeholderInput {
  tickerSymbols: [String!]!
}

type TrustAccount {
  avatar: GetAvatarLink
  details: TrustAccountDetails
  id: ID
  label: String
}

type TrustAccountDetails {
  address: Address
  annualRevenue: AnnualRevenue
  companyDocuments: [DocumentFileLinkId]
  companyName: CompanyName
  companyType: CompanyType
  ein: String
  industry: Industry
  numberOfEmployees: NumberOfEmployees
  stakeholders: [Stakeholder]
}

type TrustCompanyType {
  type: TrustCompanyTypeEnum
}

enum TrustCompanyTypeEnum {
  IRREVOCABLE
  REVOCABLE
}

input TrustCompanyTypeInput {
  type: TrustCompanyTypeEnum!
}

type TrustDraftAccount {
  avatar: GetAvatarLink
  details: CompanyDraftAccountDetails
  id: ID
  isCompleted: Boolean
  state: DraftAccountState
}

input TrustDraftAccountInput {
  address: AddressInput
  annualRevenue: AnnualRevenueInput

  """
  IMPORTANT: it removes previously uploaded avatar from s3 for this draft account
  """
  avatar: AvatarFileLinkInput
  companyDocuments: [DocumentFileLinkInput]
  companyName: CompanyNameInput
  companyType: TrustCompanyTypeInput
  ein: EINInput
  industry: IndustryInput
  numberOfEmployees: NumberOfEmployeesInput

  """IMPORTANT: it removes these documents from s3"""
  removeDocuments: [DocumentFileLinkInput]

  """
  IMPORTANT: it removes previously uploaded id scan documents from s3 for this stakeholder
  """
  removeStakeholders: [StakeholderIdInput]
  stakeholders: [StakeholderInput]
}

type USD {
  formatted: String
  value: Money!
}

input USDInput {
  value: Money!
}

input UpdateBeneficiaryAccountInput {
  avatar: AvatarFileLinkInput
  name: BeneficiaryNameInput
}

input UpdateCompanyAccountInput {
  address: AddressInput
  annualRevenue: AnnualRevenueInput

  """
  IMPORTANT: it removes previously uploaded avatar from s3 for this account
  """
  avatar: AvatarFileLinkInput
  companyDocuments: [DocumentFileLinkInput]
  industry: IndustryInput
  numberOfEmployees: NumberOfEmployeesInput

  """IMPORTANT: it removes these documents from s3"""
  removeDocuments: [DocumentFileLinkInput]

  """
  IMPORTANT: it removes previously uploaded id scan documents from s3 for this stakeholder
  """
  removeStakeholders: [StakeholderIdInput]
  stakeholders: [StakeholderInput]
}

input UpdateCompanyForVerificationInput {
  address: AddressInput
  companyDocuments: [DocumentFileLinkInput]
  companyName: CompanyNameInput

  """IMPORTANT: it removes these documents from s3"""
  removeDocuments: [DocumentFileLinkInput]

  """
  IMPORTANT: it removes previously uploaded id scan documents from s3 for this stakeholder
  """
  removeStakeholders: [StakeholderIdInput]
  stakeholders: [StakeholderInput]
}

input UpdateProfileForVerificationInput {
  """Permanent address of an investor"""
  address: AddressInput

  """Date of Birth in format YYYY-MM-DD"""
  dateOfBirth: DateOfBirthInput

  """Is the investor US. Citizen or US. Resident with Green Card or Visa"""
  domicile: DomicileInput

  """
  ID scan can be provided in more then one document, ie. 2 scans of both sides of the ID.
  Required "id" provided in the @FileLink type from the @createDocumentsFileLinks mutation
  IMPORTANT: it removes previously uploaded id scan documents from s3 if the previous document ids are not listed in the request
  """
  idScan: [DocumentFileLinkInput]

  """An investor name"""
  name: PersonName
}

input UpdateProfileInput {
  """Permanent address of an investor"""
  address: AddressInput

  """Is the investor US. Citizen or US. Resident with Green Card or Visa"""
  domicile: DomicileInput

  """
  Important Note: KYC/AML reverification will be triggered
  ID scan can be provided in more then one document, ie. 2 scans of both sides of the ID.
  Required "id" provided in the @FileLink type from the @createDocumentsFileLinks mutation
  IMPORTANT: it removes previously uploaded id scan documents from s3 if the previous document ids are not listed in the request
  """
  idScan: [DocumentFileLinkInput]
  investingExperience: ExperienceInput

  """
  Important Note: KYC/AML reverification will be triggered
  An investor name
  """
  name: PersonName

  """
  If an investor decided to remove one of the statements during onboarding
  """
  removeStatements: [StatementInput]

  """
  FINRA, Politician, Trading company stakeholder, accredited investor, terms and conditions, privacy policy statements
  REQUIRED statements to complete the profile:
  - accredited investor
  - terms and conditions
  - privacy policy
  """
  statements: [StatementInput]
}

input UpdateStakeholderForVerificationInput {
  address: AddressInput
  dateOfBirth: DateOfBirthInput
  domicile: SimplifiedDomicileInput

  """
  IMPORTANT: it removes previously uploaded id scan documents from s3 if the previous document ids are not listed in the request
  """
  idScan: [DocumentFileLinkInput]
  name: PersonName
}

"""User invitation/referral/incentive token link to share with others"""
type UserInvitationLink {
  url: String
}

type VerificationAction {
  action: ActionName!
  onObject: VerificationObject!
  reasons: [String]
}

type VerificationDecision {
  canUserContinueTheInvestment: Boolean!
  isAccountVerified: Boolean!
  requiredActions: [VerificationAction]
}

type VerificationObject {
  accountId: ID
  stakeholderId: ID
  type: VerificationObjectType!
}

enum VerificationObjectType {
  COMPANY
  PROFILE
  STAKEHOLDER
}

input VisaInput {
  birthCountry: String!
  citizenshipCountry: String!
  visaType: String!
}

scalar firstName_String_NotNull_minLength_1

scalar lastName_String_NotNull_minLength_1

scalar numberOfLinks_Int_NotNull_min_1_max_10

scalar ssn_String_NotNull_pattern_093092094
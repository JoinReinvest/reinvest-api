directive @constraint(contains: String, endsWith: String, exclusiveMax: Float, exclusiveMin: Float, format: String, max: Float, maxItems: Int, maxLength: Int, min: Float, minItems: Int, minLength: Int, multipleOf: Float, notContains: String, pattern: String, startsWith: String, uniqueTypeName: String) on ARGUMENT_DEFINITION | FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type AccountOverview {
  id: ID
  isBanned: Boolean
  label: String
  type: AccountType
}

enum AccountType {
  BENEFICIARY
  CORPORATE
  INDIVIDUAL
  TRUST
}

"""Only one of these statements can be valid"""
input AccreditedInvestorInput {
  statement: AccreditedInvestorStatement!
}

enum AccreditedInvestorStatement {
  I_AM_AN_ACCREDITED_INVESTOR
  I_AM_NOT_EXCEEDING_10_PERCENT_OF_MY_NET_WORTH_OR_ANNUAL_INCOME
}

type Address {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  state: String
  zip: String
}

input AddressInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  state: String!
  zip: String!
}

type AgreementParagraph {
  isCheckedOption: Boolean
  lines: [String!]!
}

type AgreementSection {
  header: String
  paragraphs: [AgreementParagraph!]!
}

enum AgreementStatus {
  SIGNED
  WAITING_FOR_SIGNATURE
}

type BankAccount {
  accountNumber: String
  accountType: String
  bankAccountStatus: BankAccountStatus
  bankName: String
}

enum BankAccountStatus {
  ACTIVE
  DRAFT
  INACTIVE
}

type Banned {
  accountId: ID
  banId: ID!
  banType: BannedType
  bannedObject: BannedObjectType
  dateCreated: String
  label: String
  profileId: ID!
  reason: String
  ssnEin: String
  status: String
}

enum BannedObjectType {
  COMPANY
  PROFILE
  STAKEHOLDER
}

enum BannedType {
  ACCOUNT
  PROFILE
}

type DateOfBirth {
  dateOfBirth: ISODate!
}

input DateOfBirthInput {
  dateOfBirth: ISODate!
}

type DeclarationStats {
  inDividends: String
  inFees: String
}

enum DividendDeclarationStatus {
  CALCULATED
  CALCULATING
}

type DividendDistribution {
  distributeToDate: ISODate
  id: ID
  status: DividendDistributionStatus
}

enum DividendDistributionStatus {
  DISTRIBUTED
  DISTRIBUTING
}

type DividendWithdrawal {
  accountId: ID!
  dateCreated: ISODateTime
  dateDecided: ISODateTime
  dividendId: ID
  eligibleAmount: String!
  id: ID!
  profileId: ID!
  status: DividendWithdrawalStatus!
}

enum DividendWithdrawalStatus {
  ACCEPTED
  AUTO_ACCEPTED
  REJECTED
  REQUESTED
}

type DividendsDeclaration {
  amount: String
  calculatingFromDate: ISODate
  calculationFinishedDate: ISODateTime
  createdDate: ISODateTime
  declarationDate: ISODate
  id: ID
  numberOfDays: Int
  numberOfSharesPerDay: [NumberOfSharesPerDay]
  status: DividendDeclarationStatus
  unitAmountPerDay: String
}

type DividendsDeclarationStats {
  AWAITING_DISTRIBUTION: DeclarationStats
  DISTRIBUTED: DeclarationStats
  LOCKED: DeclarationStats
  REVOKED: DeclarationStats
  TOTAL: DeclarationStats
}

"""Link id"""
type DocumentFileLinkId {
  fileName: String
  id: ID
}

"""Avatar link id input"""
input DocumentFileLinkInput {
  """File name should be in format: .pdf, .jpeg, .jpg, .png"""
  fileName: FileName!

  """This 'id' comes usually from @PutFileLink.id"""
  id: ID!
}

type Domicile {
  birthCountry: String
  citizenshipCountry: String
  type: DomicileType
  visaType: String
}

"""
An investor statement of domicile type.
Choose the right one and add details depending on the chosen type
"""
input DomicileInput {
  forGreenCard: GreenCardInput
  forVisa: VisaInput
  type: DomicileType!
}

enum DomicileType {
  CITIZEN
  GREEN_CARD
  VISA
}

enum DraftAccountType {
  CORPORATE
  INDIVIDUAL
  TRUST
}

type EIN {
  ein: String
}

input EINInput {
  ein: String!
}

"""A valid email address"""
scalar EmailAddress

input EmailInput {
  email: EmailAddress!
}

enum Experience {
  EXPERT
  NO_EXPERIENCE
  SOME_EXPERIENCE
  VERY_EXPERIENCED
}

input ExperienceInput {
  experience: Experience
}

input FINRAStatementInput {
  name: String!
}

input FileLink {
  id: String!
}

scalar FileName

type FundsWithdrawalRequest {
  accountId: ID!
  accountValue: USD!
  agreementId: ID
  createdDate: ISODateTime!
  decisionDate: ISODateTime
  decisionMessage: String
  eligibleForWithdrawal: USD!
  id: ID!
  investorWithdrawalReason: String
  isCompleted: Boolean!
  penaltiesFee: USD!
  profileId: ID!
  status: FundsWithdrawalRequestStatus!
}

enum FundsWithdrawalRequestStatus {
  APPROVED
  AWAITING_DECISION
  AWAITING_SIGNING_AGREEMENT
  DRAFT
  REJECTED
}

enum FundsWithdrawalStatus {
  COMPLETED
  PENDING
  READY_TO_SEND
}

type GetAvatarLink {
  id: ID
  initials: String
  url: String
}

"""Link id + url to read the document"""
type GetDocumentLink {
  id: ID
  url: String
}

input GreenCardInput {
  birthCountry: String!
  citizenshipCountry: String!
}

"""Date in format YYYY-MM-DD"""
scalar ISODate

"""DateTime in format YYYY-MM-DDThh:mm:ss in UTC+0"""
scalar ISODateTime

type ImpactMetrics {
  jobsCreated: String
  totalProjectSize: String
  units: String
}

input ImpactMetricsInput {
  jobsCreated: String!
  totalProjectSize: String!
  units: String!
}

type Investment {
  amount: USD!
  createdAt: ISODateTime!
  id: ID!
  status: InvestmentStatus!
  subscriptionAgreementId: ID
  tradeId: String!
}

enum InvestmentStatus {
  CANCELED
  CANCELING
  FAILED
  FINISHED
  FUNDED
  IN_PROGRESS
  REVERTED
  SETTLING
  TRANSFERRED
  WAITING_FOR_FEES_APPROVAL
  WAITING_FOR_INVESTMENT_START
  WAITING_FOR_SUBSCRIPTION_AGREEMENT
}

type KeyMetrics {
  projectReturn: String
  rating: String
  structure: String
}

input KeyMetricsInput {
  projectReturn: String!
  rating: String!
  structure: String!
}

input LegalNameInput {
  name: String!
}

type Location {
  lat: String
  lng: String
}

"""Money value as integer. 1=$0.01, 1000 = $10.00, 10000000 = $100,000.00"""
scalar Money

type Mutation {
  """It accepts funds withdrawals request sent by investors"""
  acceptWithdrawalRequests(ids: [ID!]!): Boolean!

  """
  Create portfolio author.
  As avatar id please use id from createAvatarFileLinks mutation
  """
  addPortfolioAuthor(input: PortfolioAuthorInput!): Boolean

  """
  Create portfolio update.
  As image id please use id from createImageFileLinks mutation
  """
  addPortfolioUpdate(input: PortfolioUpdateInput!): Boolean

  """Ban corporate/trust account"""
  banCompanyAccount(accountId: ID!, reason: String!): Boolean

  """Ban user profile/individual account"""
  banUser(profileId: ID!, reason: String!): Boolean
  cancelUserInvestment(investmentId: ID!, profileId: ID!): Boolean

  """
  Create file links for author's avatars.
  In the response, it returns the "id" and "url".
  Use "url" for PUT request to upload the file directly to AWS S3. The url has expiration date!
  Use "id" wherever system needs the reference to uploaded file.
  """
  createAuthorFileLinks(numberOfLinks: numberOfLinks_Int_NotNull_min_1_max_10!): [PutFileLink]

  """
  Create file links for documents.
  In the response, it returns the "id" and "url".
  Use "url" for PUT request to upload the file directly to AWS S3. The url has expiration date!
  Use "id" wherever system needs the reference to uploaded file.
  """
  createImageFileLinks(numberOfLinks: numberOfLinks_Int_NotNull_min_1_max_10!): [PutFileLink]

  """
  @access: Executive
  Declare the dividend from the LAST declarationDate to the CURRENT declarationDate
  """
  declareDividend(amount: Int!, declarationDate: ISODate!): DividendsDeclaration

  """Remove author from database"""
  deletePortfolioAuthor(portfolioAuthorId: ID!): Boolean

  """Remove portfolio update from database"""
  deletePortfolioUpdate(portfolioUpdateId: ID!): Boolean

  """
  @access: Executive
  Distributes all AWAITING_DISTRIBUTION status until now
  """
  distributeDividends: DividendDistribution

  """
  @access: Executive
  Manually creates inventive reward for inviterEmail
  User can get many INVITER rewards.
  INVITER reward - when someone registers with INVITER invite link.
  """
  giveIncentiveRewardByHand(inviteeEmail: EmailAddress, inviterEmail: EmailAddress, whoShouldGetTheReward: RewardType): Boolean

  """
  It marks withdrawal process as completed - it should be done only if all documents were sent to Vertalo and North Capital
  """
  markWithdrawalCompleted(withdrawalId: ID!): Boolean!

  """
  It takes all accepted funds withdrawal and dividends withdrawal requests and generates documents
  that must be sent to Vertalo (redemption form) and North Capital (payout form) by admin to manually execute
  shares redemptions and transfer money to investors.
  """
  prepareWithdrawalDocuments: ID!

  """
  It pushes the process of preparing withdrawal documents (id returned by 'prepareWithdrawalDocuments' mutation)
  in case if it was interrupted or failed.
  """
  pushPreparingWithdrawalDocuments(withdrawalId: ID!): Boolean!

  """
  @access: Admin, Executive
  Recover verification of an object after failed request manually
  """
  recoverVerification(objectId: ID!): Boolean

  """
  Currently we can have only one portfolio in the system. This mutation will create a new portfolio and set it as active and disallow to create another one.
  """
  registerPortfolio(linkToOfferingCircular: String!, name: String!, northCapitalOfferingId: String!, vertaloAllocationId: String!): PortfolioDetails

  """It rejects funds withdrawals request sent by investors"""
  rejectWithdrawalRequests(ids: [ID!]!, reason: String!): Boolean!
  synchronizePortfolioNav: Nav
  synchronizePortfolioPropertiesFromDealpath: Boolean

  """Unban banned entity"""
  unban(banId: ID!): Boolean

  """
  Update profile fields
  Important Note: Some fields can trigger KYC/AML reverification
  """
  updateProfile(input: UpdateProfileInput): Profile
  updateProperty(input: PropertyInput!, propertyId: Int): Boolean
}

type Nav {
  dateSynchronization: ISODateTime
  numberOfShares: Float
  unitPrice: USD
}

type NumberOfSharesPerDay {
  date: ISODate
  numberOfShares: Float
}

type POI {
  description: String
  image: String
  name: String
}

input POIInput {
  description: String!
  image: FileLink!
  name: String!
}

"""If not provided, default pagination is page: 0, perPage: 10"""
input Pagination {
  page: Int! = 0
  perPage: Int! = 10
}

input PersonName {
  firstName: firstName_String_NotNull_minLength_1!
  lastName: lastName_String_NotNull_minLength_1!
  middleName: String
}

type PersonNameType {
  firstName: String
  lastName: String
  middleName: String
}

input PoliticianStatementInput {
  description: String!
}

type PortfolioAuthor {
  avatar: GetAvatarLink
  id: ID!
  name: String
}

input PortfolioAuthorInput {
  avatar: FileLink
  name: String!
}

type PortfolioDetails {
  assetName: String
  currentNav: Nav
  id: ID
  linkToOfferingCircular: String
  name: String
  navHistory: [Nav]
  northCapitalOfferingId: String
  offeringName: String
  properties: [Property]
  vertaloAllocationId: String
}

type PortfolioUpdate {
  author: PortfolioAuthor
  body: String
  createdAt: ISODateTime
  id: ID!
  image: GetDocumentLink
  title: String
}

input PortfolioUpdateInput {
  body: String
  createdAt: ISODateTime!
  image: FileLink
  portfolioAuthorId: ID!
  title: String!
}

input PrivacyPolicyInput {
  statement: PrivacyPolicyStatement!
}

enum PrivacyPolicyStatement {
  I_HAVE_READ_AND_AGREE_TO_THE_REINVEST_PRIVACY_POLICY
}

"""
An investor profile information.
Returns data about investor details, accounts and notifications
"""
type Profile {
  details: ProfileDetails

  """The external, nice-looking profile ID"""
  externalId: String
  isCompleted: Boolean

  """The name/label of the user"""
  label: String
}

type ProfileDetails {
  address: Address
  dateOfBirth: String
  domicile: Domicile
  experience: Experience
  firstName: String
  idScan: [DocumentFileLinkId]
  lastName: String
  middleName: String
  ssn: String
  statements: [Statement]
}

input ProfileDetailsInput {
  """Permanent address of an investor"""
  address: AddressInput

  """Date of Birth in format YYYY-MM-DD"""
  dateOfBirth: DateOfBirthInput

  """Is the investor US. Citizen or US. Resident with Green Card or Visa"""
  domicile: DomicileInput

  """
  ID scan can be provided in more then one document, ie. 2 scans of both sides of the ID.
  Required "id" provided in the @FileLink type from the @createDocumentsFileLinks mutation
  IMPORTANT: it removes previously uploaded id scan documents from s3 if the previous document ids are not listed in the request
  """
  idScan: [DocumentFileLinkInput]
  investingExperience: ExperienceInput

  """An investor name"""
  name: PersonName

  """
  If an investor decided to remove one of the statements during onboarding
  """
  removeStatements: [StatementInput]

  """A valid SSN number"""
  ssn: SSNInput

  """
  FINRA, Politician, Trading company stakeholder, accredited investor, terms and conditions, privacy policy statements
  REQUIRED statements to complete the profile:
  - accredited investor
  - terms and conditions
  - privacy policy
  """
  statements: [StatementInput]

  """
  Send this field if you want to finish the onboarding. In case of success verification, onboarding will be considered as completed
  """
  verifyAndFinish: Boolean
}

type Property {
  POIs: [POI]
  address: PropertyAddress
  gallery: [String]
  id: Int
  image: String
  impactMetrics: ImpactMetrics
  keyMetrics: KeyMetrics
  location: Location
  name: String
}

type PropertyAddress {
  addressLine: String
  city: String
  zip: String
}

input PropertyInput {
  POIs: [POIInput]
  gallery: [FileLink]
  image: FileLink
  impactMetrics: ImpactMetricsInput
  keyMetrics: KeyMetricsInput
}

"""Link id + PUT url to store resource in the storage"""
type PutFileLink {
  id: ID
  url: String
}

type Query {
  """Returns admin document link by id """
  getAdminDocument(documentId: ID!): GetDocumentLink

  """Returns all portfolio authors"""
  getAllPortfolioAuthors: [PortfolioAuthor]

  """Returns all portfolio updates"""
  getAllPortfolioUpdates: [PortfolioUpdate]
  getDividendDeclarationStats(declarationId: ID!): DividendsDeclarationStats

  """Returns all information about properties in the portfolio"""
  getPortfolioDetails: PortfolioDetails

  """Get user profile"""
  getProfile(profileId: ID!): Profile
  getUserAccounts(profileId: ID!): [AccountOverview]

  """Returns document link by id"""
  getUserDocument(documentId: ID!, profileId: ID!): GetDocumentLink
  hello: String
  listBanned(pagination: Pagination = {page: 0, perPage: 30}): [Banned]

  """List all investors dividends withdrawals requests"""
  listDividendWithdrawals(pagination: Pagination = {page: 0, perPage: 100}): [DividendWithdrawal]
  listDividendsDeclarations: [DividendsDeclaration]

  """
  List pending investors withdrawal requests. Requests must be accepted or rejected by executive
  """
  listFundsWithdrawalsRequests(pagination: Pagination = {page: 0, perPage: 100}): [FundsWithdrawalRequest]
  listUserInvestments(accountId: ID!, pagination: Pagination = {page: 0, perPage: 30}, profileId: ID!): [Investment]
  listUsers(pagination: Pagination = {page: 0, perPage: 30}): [User]

  """
  List all withdrawals processes created by 'prepareWithdrawalDocuments' mutation
  """
  listWithdrawals(pagination: Pagination = {page: 0, perPage: 100}): [Withdrawal]
}

enum RewardType {
  BOTH
  INVITEE
  INVITER
}

input SSNInput {
  """The valid SSN is 9 digits in format 'XXX-XX-XXXX'"""
  ssn: ssn_String_NotNull_pattern_093092094!
}

type SimplifiedDomicile {
  type: SimplifiedDomicileType
}

input SimplifiedDomicileInput {
  type: SimplifiedDomicileType!
}

enum SimplifiedDomicileType {
  CITIZEN
  RESIDENT
}

type Statement {
  details: [String]
  type: StatementType
}

"""
An investor statements for:
- being a FINRA member
- politician
- public trading company stakeholder
- accredited investor
- terms and conditions
- privacy policy
Choose type and add details depending on the chosen type
"""
input StatementInput {
  forAccreditedInvestor: AccreditedInvestorInput
  forFINRA: FINRAStatementInput
  forPolitician: PoliticianStatementInput
  forPrivacyPolicy: PrivacyPolicyInput
  forStakeholder: TradingCompanyStakeholderInput
  forTermsAndConditions: TermsAndConditionsInput
  type: StatementType!
}

enum StatementType {
  AccreditedInvestor
  FINRAMember
  Politician
  PrivacyPolicy
  TermsAndConditions
  TradingCompanyStakeholder
}

type SubscriptionAgreement {
  content: [AgreementSection!]!
  createdAt: ISODateTime!
  id: ID!
  signedAt: ISODateTime
  status: AgreementStatus!
  type: SubscriptionAgreementType!
}

enum SubscriptionAgreementType {
  DIRECT_DEPOSIT
  RECURRING_INVESTMENT
}

input TermsAndConditionsInput {
  statement: TermsAndConditionsStatement!
}

enum TermsAndConditionsStatement {
  I_HAVE_READ_AND_AGREE_TO_THE_REINVEST_TERMS_AND_CONDITIONS
}

input TradingCompanyStakeholderInput {
  tickerSymbols: [String!]!
}

type USD {
  formatted: String
  value: Money!
}

input USDInput {
  value: Money!
}

input UpdateProfileForVerificationInput {
  """Permanent address of an investor"""
  address: AddressInput

  """Date of Birth in format YYYY-MM-DD"""
  dateOfBirth: DateOfBirthInput

  """Is the investor US. Citizen or US. Resident with Green Card or Visa"""
  domicile: DomicileInput

  """
  ID scan can be provided in more then one document, ie. 2 scans of both sides of the ID.
  Required "id" provided in the @FileLink type from the @createDocumentsFileLinks mutation
  IMPORTANT: it removes previously uploaded id scan documents from s3 if the previous document ids are not listed in the request
  """
  idScan: [DocumentFileLinkInput]

  """An investor name"""
  name: PersonName
}

input UpdateProfileInput {
  """Permanent address of an investor"""
  address: AddressInput

  """Is the investor US. Citizen or US. Resident with Green Card or Visa"""
  domicile: DomicileInput

  """
  Important Note: KYC/AML reverification will be triggered
  ID scan can be provided in more then one document, ie. 2 scans of both sides of the ID.
  Required "id" provided in the @FileLink type from the @createDocumentsFileLinks mutation
  IMPORTANT: it removes previously uploaded id scan documents from s3 if the previous document ids are not listed in the request
  """
  idScan: [DocumentFileLinkInput]
  investingExperience: ExperienceInput

  """
  Important Note: KYC/AML reverification will be triggered
  An investor name
  """
  name: PersonName

  """
  If an investor decided to remove one of the statements during onboarding
  """
  removeStatements: [StatementInput]

  """
  FINRA, Politician, Trading company stakeholder, accredited investor, terms and conditions, privacy policy statements
  REQUIRED statements to complete the profile:
  - accredited investor
  - terms and conditions
  - privacy policy
  """
  statements: [StatementInput]
}

type User {
  createdAt: String
  email: String
  isBanned: Boolean
  profileId: ID
}

input VisaInput {
  birthCountry: String!
  citizenshipCountry: String!
  visaType: String!
}

type Withdrawal {
  dateCompleted: ISODateTime
  dateCreated: ISODateTime!
  id: ID!

  """Use getAdminDocument to download"""
  payoutId: ID!

  """
  Use getAdminDocument to download - if there were not funds withdrawals requests, then it will be null
  """
  redemptionId: ID
  status: FundsWithdrawalStatus!
}

scalar firstName_String_NotNull_minLength_1

scalar lastName_String_NotNull_minLength_1

scalar numberOfLinks_Int_NotNull_min_1_max_10

scalar ssn_String_NotNull_pattern_093092094
name: functions-github-actions
on:
  push:
    tags:
      - DEVELOPMENT_SAAS_DEPLOYMENT
      - INTEGRATIONS_SAAS_DEPLOYMENT
      - STAGING_SAAS_DEPLOYMENT
      - PRODUCTION_SAAS_DEPLOYMENT
jobs:
  build-check-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment
        run: |
          CURRENT_TAG=${GITHUB_REF##*/}
          echo "Current tag: ${CURRENT_TAG}"
          if [ $CURRENT_TAG == "DEVELOPMENT_SAAS_DEPLOYMENT" ]; then
            ENVIRONMENT="DEVELOPMENT"
          elif [ $CURRENT_TAG == "INTEGRATIONS_SAAS_DEPLOYMENT" ]; then
            ENVIRONMENT="INTEGRATIONS"
          elif [ $CURRENT_TAG == "STAGING_SAAS_DEPLOYMENT" ]; then
            ENVIRONMENT="STAGING"
          elif [ $CURRENT_TAG == "PRODUCTION_SAAS_DEPLOYMENT" ]; then
            ENVIRONMENT="PRODUCTION"
          else
            echo "Wrong tag";
            exit 1;
          fi
          echo "Current environment: ${ENVIRONMENT}"
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Authenticate with private NPM package
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      - name: "Install dependencies"
        run: yarn install
      - name: "Deploy saas"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          POSTGRESQL_USER: ${{ secrets[format('{0}_POSTGRESQL_USER', env.ENVIRONMENT)] }}
          POSTGRESQL_PASSWORD: ${{ secrets[format('{0}_POSTGRESQL_PASSWORD', env.ENVIRONMENT)] }}
          COGNITO_RETENTION_POLICY: ${{ secrets[format('{0}_COGNITO_RETENTION_POLICY', env.ENVIRONMENT)] }}
          POSTGRESQL_MAIN_USER: ${{ secrets[format('{0}_POSTGRESQL_MAIN_USER', env.ENVIRONMENT)] }}
          POSTGRESQL_MAIN_PASSWORD: ${{ secrets[format('{0}_POSTGRESQL_MAIN_PASSWORD', env.ENVIRONMENT)] }}
          POSTGRESQL_AWS_DB_INSTANCE: ${{ secrets[format('{0}_POSTGRESQL_AWS_DB_INSTANCE', env.ENVIRONMENT)] }}
          POSTGRESQL_AWS_DB_RETENTION_POLICY: ${{ secrets[format('{0}_POSTGRESQL_AWS_DB_RETENTION_POLICY', env.ENVIRONMENT)] }}
          POSTGRESQL_AWS_DB_STORAGE_GB: ${{ secrets[format('{0}_POSTGRESQL_AWS_DB_STORAGE_GB', env.ENVIRONMENT)] }}
        run: |
          environment=${{env.ENVIRONMENT}}
          yarn "${environment,,}:deploy:saas"
